name: Release
on:
#   pull_request:
#     types:
#     - closed
#     branches:
#     - main
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  # PyTest:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: ["3.10.x", "3.11.x"]
  #   steps:
  #       - name: Checkout
  #         uses: actions/checkout@v3
  #       - name: Set up Python ${{ matrix.python-version }}
  #         uses: actions/setup-python@v4
  #         with:
  #           python-version: ${{ matrix.python-version }}
  #       - name: Install Python Dependencies
  #         run: |
  #           pip3 install -r app/requirements.txt
  #       - name: Install Testing Dependecies
  #         run: |
  #           pip3 install pytest httpx
  #       - name: Run PyTest
  #         run: |
  #           pytest
  Release:
    # needs: PyTest
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
        - name: Get Version Tag
          id: version
          uses: paulhatch/semantic-version@v5.0.2
          with:
            tag_prefix: ''
            major_pattern: "Major"
            minor_pattern: "Minor"
            version_format: "${major}.${minor}.${patch}-prerelease${increment}"
            change_path: "app"
            # search_commit_body: true
            # If this is set to true, *every* commit will be treated as a new version.
            bump_each_commit: true
        - name: Find and Replace
          uses: jacobtomlinson/gha-find-replace@v3
          with:
            include: app/Dockerfile
            find: ENV VERSION=\d{1,3}\.\d{1,3}\.\d{1,3}
            replace: ENV VERSION=${{ steps.version.outputs.version_tag }}
            regex: true
        - name: Commit & Push Version Change
          uses: actions-js/push@master
          with:
            message: Auto Version Bump
            github_token: ${{ secrets.GITHUB_TOKEN }}
        - name: Create Release
          uses: ncipollo/release-action@v1
          with:
            tag: ${{ steps.version.outputs.version_tag }}
            name: Version ${{ steps.version.outputs.version_tag }}
            generateReleaseNotes: true
            # draft: true
            # prerelease: true
            makeLatest: true
            updateOnlyUnreleased: false
            allowUpdates: true
            omitBodyDuringUpdate: true
            omitNameDuringUpdate: true
            omitPrereleaseDuringUpdate: true
  # Docker:
  #   runs-on: ubuntu-latest
  #   needs: Release
  #   steps:
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v2

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     # - name: Login to Docker Hub
  #     #   uses: docker/login-action@v2
  #     #   with:
  #     #     username: ${{ secrets.DOCKERHUB_USERNAME }}
  #     #     password: ${{ secrets.DOCKERHUB_TOKEN }}
        
  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: ./app
  #         file: ./Dockerfile
  #         push: true
  #         tags: "latest,${{needs.Release.outputs.steps.version.outputs.version_tag}}"
  Docker:
    runs-on: ubuntu-latest
    needs: Release
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build
        uses: docker/build-push-action@v4
        with:
          context: ./app
          load: true
          tags: "shield-cyber/openvas-rest-api:${{needs.Release.outputs.steps.version.outputs.version_tag}}"
      -
        name: Inspect
        run: |
          docker image inspect shield-cyber/openvas-rest-api